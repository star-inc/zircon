// WARNING: This file is machine generated by fidlc.

#include <lib/fidl/internal.h>


extern const fidl_type_t test_name_OnlySyzkallerTable;
extern const fidl_type_t test_name_OnlyRustTable;
extern const fidl_type_t test_name_OnlyLlcppTable;
extern const fidl_type_t test_name_OnlyLlcppNullableRefTable;
extern const fidl_type_t test_name_OnlyGoTable;
extern const fidl_type_t test_name_OnlyDartTable;


extern const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable;
static const struct FidlStructField Fields60test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest[] = {};
const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequestTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields60test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest, .field_count=0u, .size=16u, .name="test.name/OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolRequest"}}};

extern const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable;
static const struct FidlStructField Fields61test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse[] = {};
const fidl_type_t test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponseTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields61test_name_OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse, .field_count=0u, .size=16u, .name="test.name/OnlyLibfuzzerLibfuzzerNeedsNonemptyProtocolResponse"}}};


const fidl_type_t test_name_OnlySyzkallerTable = {.type_tag=kFidlTypeBits, {.coded_bits={.underlying_type=kFidlCodedPrimitive_Uint32, .mask=1ul, .name="test.name/OnlySyzkaller"}}};

static const struct FidlTableField Fields18test_name_OnlyRust[] = {};
const fidl_type_t test_name_OnlyRustTable = {.type_tag=kFidlTypeTable, {.coded_table={.fields=Fields18test_name_OnlyRust, .field_count=0u, .name="test.name/OnlyRust"}}};

static const struct FidlXUnionField Fields19test_name_OnlyLlcpp[] = {
    /*FidlXUnionField*/{.type=&fidl_internal_kUint32Table, .ordinal=1u}
};
const fidl_type_t test_name_OnlyLlcppTable = {.type_tag=kFidlTypeXUnion, {.coded_xunion={.field_count=1u, .fields=Fields19test_name_OnlyLlcpp, .nullable=kFidlNullability_Nonnullable, .name="test.name/OnlyLlcpp", .strictness=kFidlStrictness_Strict}}};
static const struct FidlXUnionField Fields30test_name_OnlyLlcppNullableRef[] = {
    /*FidlXUnionField*/{.type=&fidl_internal_kUint32Table, .ordinal=1u}
};
const fidl_type_t test_name_OnlyLlcppNullableRefTable = {.type_tag=kFidlTypeXUnion, {.coded_xunion={.field_count=1u, .fields=Fields30test_name_OnlyLlcppNullableRef, .nullable=kFidlNullability_Nullable, .name="test.name/OnlyLlcpp", .strictness=kFidlStrictness_Strict}}};
static const struct FidlStructField Fields16test_name_OnlyGo[] = {};
const fidl_type_t test_name_OnlyGoTable = {.type_tag=kFidlTypeStruct, {.coded_struct={.fields=Fields16test_name_OnlyGo, .field_count=0u, .size=1u, .name="test.name/OnlyGo"}}};

static bool EnumValidatorFor_test_name_OnlyDart(uint64_t v) { return (v == 1ul) || false; }
const fidl_type_t test_name_OnlyDartTable = {.type_tag=kFidlTypeEnum, {.coded_enum={.underlying_type=kFidlCodedPrimitive_Uint32, .validate=&EnumValidatorFor_test_name_OnlyDart, .name="test.name/OnlyDart"}}};

